// Generated by CoffeeScript 1.6.3
var Collection, Record, deepEqual, equal, ok, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ref = require('assert'), ok = _ref.ok, equal = _ref.equal, deepEqual = _ref.deepEqual;

Collection = require('backbone').Collection;

Record = require('./backbone.record');

describe('Backbone.Record', function() {
  describe('schema with just fields', function() {
    var M, _ref1;
    M = (function(_super) {
      __extends(M, _super);

      function M() {
        _ref1 = M.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      M.define('a', 'b');

      return M;

    })(Record);
    it('has schema as prototype', function() {
      ok(M.prototype.schema);
      return deepEqual(M.prototype.schema, {
        a: null,
        b: null
      });
    });
    it('defines getters', function() {
      var m, _ref2;
      M = (function(_super) {
        __extends(M, _super);

        function M() {
          _ref2 = M.__super__.constructor.apply(this, arguments);
          return _ref2;
        }

        M.define('a', 'b');

        return M;

      })(Record);
      m = new M({
        a: 1,
        b: 2
      });
      equal(m.a, 1);
      equal(m.a, m.get('a'));
      equal(m.b, 2);
      return equal(m.b, m.get('b'));
    });
    return it('defines setters', function() {
      var m;
      m = new M({
        a: 1,
        b: 2
      });
      m.a = 2;
      equal(m.a, 2);
      return equal(m.a, m.get('a'));
    });
  });
  return describe('complex schema', function() {
    var Page, Revision, Revisions, _ref1, _ref2, _ref3;
    Revision = (function(_super) {
      __extends(Revision, _super);

      function Revision() {
        _ref1 = Revision.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      Revision.define({
        timestamp: Date
      });

      return Revision;

    })(Record);
    Revisions = (function(_super) {
      __extends(Revisions, _super);

      function Revisions() {
        _ref2 = Revisions.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      Revisions.prototype.model = Revision;

      return Revisions;

    })(Collection);
    Page = (function(_super) {
      __extends(Page, _super);

      function Page() {
        _ref3 = Page.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      Page.define({
        lastRevision: Revision,
        history: Revisions
      });

      return Page;

    })(Record);
    return it('deserializes complex structures', function() {
      var p;
      p = new Page({
        id: 1,
        lastRevision: {
          id: 'rev2',
          timestamp: '2011-06-01 12:12:12'
        },
        history: [
          {
            id: 'rev1',
            timestamp: '2011-06-01 12:12:12'
          }, {
            id: 'rev2',
            timestamp: '2011-06-01 12:12:12'
          }
        ]
      }, {
        parse: true
      });
      ok(p.id);
      equal(p.id, 1);
      ok(p.lastRevision);
      ok(p.lastRevision instanceof Revision);
      ok(p.lastRevision.timestamp instanceof Date);
      equal(p.lastRevision.id, 'rev2');
      ok(p.history);
      ok(p.history instanceof Revisions);
      equal(p.history.length, 2);
      ok(p.history.at(0) instanceof Revision);
      return equal(p.history.at(0).id, 'rev1');
    });
  });
});
