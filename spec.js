// Generated by CoffeeScript 1.6.2
var Collection, Record, attribute, deepEqual, equal, invariant, isEmpty, ok, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ref = require('assert'), ok = _ref.ok, equal = _ref.equal, deepEqual = _ref.deepEqual;

Collection = require('backbone').Collection;

isEmpty = require('underscore').isEmpty;

_ref1 = require('./index'), Record = _ref1.Record, attribute = _ref1.attribute, invariant = _ref1.invariant;

describe('Backbone.Record', function() {
  describe('schema with just fields', function() {
    var M, _ref2;

    M = (function(_super) {
      __extends(M, _super);

      function M() {
        _ref2 = M.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      M.define('a', 'b');

      return M;

    })(Record);
    it('has schema as prototype', function() {
      ok(M.prototype.schema);
      return deepEqual(M.prototype.schema, {
        a: null,
        b: null
      });
    });
    it('defines getters', function() {
      var m, _ref3;

      M = (function(_super) {
        __extends(M, _super);

        function M() {
          _ref3 = M.__super__.constructor.apply(this, arguments);
          return _ref3;
        }

        M.define('a', 'b');

        return M;

      })(Record);
      m = new M({
        a: 1,
        b: 2
      });
      equal(m.a, 1);
      equal(m.a, m.get('a'));
      equal(m.b, 2);
      return equal(m.b, m.get('b'));
    });
    return it('defines setters', function() {
      var m;

      m = new M({
        a: 1,
        b: 2
      });
      m.a = 2;
      equal(m.a, 2);
      return equal(m.a, m.get('a'));
    });
  });
  describe('complex schema', function() {
    var Page, Revision, Revisions, _ref2, _ref3, _ref4;

    Revision = (function(_super) {
      __extends(Revision, _super);

      function Revision() {
        _ref2 = Revision.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      Revision.define({
        timestamp: Date
      });

      return Revision;

    })(Record);
    Revisions = (function(_super) {
      __extends(Revisions, _super);

      function Revisions() {
        _ref3 = Revisions.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      Revisions.prototype.model = Revision;

      return Revisions;

    })(Collection);
    Page = (function(_super) {
      __extends(Page, _super);

      function Page() {
        _ref4 = Page.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      Page.define({
        lastRevision: Revision,
        history: Revisions
      });

      return Page;

    })(Record);
    return it('deserializes complex structures', function() {
      var p;

      p = new Page({
        id: 1,
        lastRevision: {
          id: 'rev2',
          timestamp: '2011-06-01 12:12:12'
        },
        history: [
          {
            id: 'rev1',
            timestamp: '2011-06-01 12:12:12'
          }, {
            id: 'rev2',
            timestamp: '2011-06-01 12:12:12'
          }
        ]
      }, {
        parse: true
      });
      ok(p.id);
      equal(p.id, 1);
      ok(p.lastRevision);
      ok(p.lastRevision instanceof Revision);
      ok(p.lastRevision.timestamp instanceof Date);
      equal(p.lastRevision.id, 'rev2');
      ok(p.history);
      ok(p.history instanceof Revisions);
      equal(p.history.length, 2);
      ok(p.history.at(0) instanceof Revision);
      return equal(p.history.at(0).id, 'rev1');
    });
  });
  return describe('validation', function() {
    var User, _ref2;

    User = (function(_super) {
      __extends(User, _super);

      function User() {
        _ref2 = User.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      User.define({
        birthday: attribute.Number.min(1970),
        email: attribute.String.matches('.+@example.com')
      });

      return User;

    })(Record);
    it('validates on init', function() {
      var user;

      user = new User({
        birthday: 1969,
        email: 'andrey'
      }, {
        parse: true,
        validate: true
      });
      ok(user.validationError);
      ok(user.validationError.birthday);
      ok(user.validationError.email);
      user = new User({
        birthday: 1970,
        email: 'andrey@example.com'
      }, {
        parse: true,
        validate: true
      });
      return ok(!user.validationError);
    });
    it('validates on isValid', function() {
      var user;

      user = new User({
        birthday: 'x',
        email: 'andrey'
      }, {
        parse: true
      });
      ok(!user.validationError);
      ok(!user.isValid());
      ok(user.validationError);
      ok(user.validationError.birthday);
      return ok(user.validationError.email);
    });
    it('treats all attributes as required by default', function() {
      var user, _ref3;

      User = (function(_super) {
        __extends(User, _super);

        function User() {
          _ref3 = User.__super__.constructor.apply(this, arguments);
          return _ref3;
        }

        User.define({
          birthday: attribute.Number.min(1970),
          email: attribute.String.matches('.+@example.com')
        });

        return User;

      })(Record);
      user = new User({}, {
        parse: true,
        validate: true
      });
      ok(user.validationError);
      ok(user.validationError.birthday);
      return ok(user.validationError.email);
    });
    it('allows to describe optional values', function() {
      var user, _ref3;

      User = (function(_super) {
        __extends(User, _super);

        function User() {
          _ref3 = User.__super__.constructor.apply(this, arguments);
          return _ref3;
        }

        User.define({
          birthday: attribute.Number.min(1970).optional(),
          email: attribute.String.matches('.+@example.com')
        });

        return User;

      })(Record);
      user = new User({}, {
        parse: true,
        validate: true
      });
      ok(user.validationError);
      ok(!user.validationError.birthday);
      ok(user.validationError.email);
      user = new User({
        birthday: 1969
      }, {
        parse: true,
        validate: true
      });
      ok(user.validationError);
      ok(user.validationError.birthday);
      return ok(user.validationError.email);
    });
    it('allows "one of" validation', function() {
      var Model, _ref3;

      Model = (function(_super) {
        __extends(Model, _super);

        function Model() {
          _ref3 = Model.__super__.constructor.apply(this, arguments);
          return _ref3;
        }

        Model.define({
          a: attribute.Object.oneOf(1, 2, 3)
        });

        return Model;

      })(Record);
      ok(new Model({
        a: 1
      }).isValid());
      ok(new Model({
        a: 2
      }).isValid());
      ok(new Model({
        a: 3
      }).isValid());
      return ok(!new Model({
        a: 4
      }).isValid());
    });
    describe('invariants', function() {
      var M, _ref3;

      return M = (function(_super) {
        __extends(M, _super);

        function M() {
          _ref3 = M.__super__.constructor.apply(this, arguments);
          return _ref3;
        }

        M.define({
          a: attribute.Number.min(1).optional(),
          b: attribute.Number.max(1).optional()
        });

        M.invariant(invariant.requireOneOf('a', 'b'));

        it('validates', function() {
          var m;

          m = new M({
            a: 1,
            b: 1
          });
          ok(m.isValid());
          m = new M({
            a: 1
          });
          ok(m.isValid());
          m = new M({
            b: 1
          });
          ok(m.isValid());
          m = new M();
          ok(!m.isValid());
          return ok(m.validationError.self);
        });

        return M;

      })(Record);
    });
    describe('validators', function() {
      var validate;

      validate = function(validator, value, isNew) {
        return isEmpty(validator.validate(value, isNew));
      };
      describe('Number', function() {
        it('validates', function() {
          ok(validate(attribute.Number, 1));
          ok(validate(attribute.Number, '1'));
          return ok(!validate(attribute.Number, 'x'));
        });
        it('validates min', function() {
          ok(validate(attribute.Number.min(0), 1));
          ok(validate(attribute.Number.min(0), 0));
          return ok(!validate(attribute.Number.min(0), -1));
        });
        return it('validates max', function() {
          ok(validate(attribute.Number.max(1), 1));
          ok(validate(attribute.Number.max(0), 0));
          return ok(!validate(attribute.Number.max(0), 2));
        });
      });
      describe('String', function() {
        it('validates', function() {
          ok(validate(attribute.String, 'x'));
          return ok(!validate(attribute.String, 1));
        });
        return it('validates via regexp', function() {
          ok(validate(attribute.String.matches('[ab]'), 'a'));
          ok(validate(attribute.String.matches('[ab]'), 'b'));
          return ok(!validate(attribute.String.matches('[ab]'), 'c'));
        });
      });
      describe('oneOf', function() {
        return it('validates', function() {
          ok(validate(attribute.oneOf(1, 2), 1));
          ok(validate(attribute.oneOf(1, 2), 2));
          return ok(!validate(attribute.oneOf(1, 2), 3));
        });
      });
      return describe('Object', function() {
        it('validates', function() {
          ok(validate(attribute.Object, 1));
          ok(!validate(attribute.Object, void 0));
          return ok(!validate(attribute.Object, null));
        });
        it('validates optional values', function() {
          ok(validate(attribute.Object.optional(), void 0));
          return ok(validate(attribute.Object.optional(), null));
        });
        return it('validates optional values for isNew state', function() {
          ok(validate(attribute.Object.optionalWhenNew(), void 0, true));
          ok(validate(attribute.Object.optionalWhenNew(), null, true));
          ok(validate(attribute.Object.optional(), void 0, true));
          ok(validate(attribute.Object.optional(), null, true));
          ok(validate(attribute.Object.optional(), void 0, false));
          ok(validate(attribute.Object.optional(), null, false));
          ok(!validate(attribute.Object.optionalWhenNew(), void 0, false));
          return ok(!validate(attribute.Object.optionalWhenNew(), null, false));
        });
      });
    });
    return describe('validation with nested models', function() {
      var Page, Revision, Revisions, _ref3, _ref4, _ref5;

      Revision = (function(_super) {
        __extends(Revision, _super);

        function Revision() {
          _ref3 = Revision.__super__.constructor.apply(this, arguments);
          return _ref3;
        }

        Revision.define({
          timestamp: attribute.ofType(Date)
        });

        return Revision;

      })(Record);
      Revisions = (function(_super) {
        __extends(Revisions, _super);

        function Revisions() {
          _ref4 = Revisions.__super__.constructor.apply(this, arguments);
          return _ref4;
        }

        Revisions.prototype.model = Revision;

        return Revisions;

      })(Collection);
      Page = (function(_super) {
        __extends(Page, _super);

        function Page() {
          _ref5 = Page.__super__.constructor.apply(this, arguments);
          return _ref5;
        }

        Page.define({
          lastRevision: attribute.ofType(Revision).optional(),
          history: attribute.ofType(Revisions)
        });

        return Page;

      })(Record);
      it('deserializes complex structures', function() {
        var p;

        p = new Page({
          id: 1,
          lastRevision: {
            id: 'rev2',
            timestamp: '2011-06-01 12:12:12'
          },
          history: [
            {
              id: 'rev1',
              timestamp: '2011-06-01 12:12:12'
            }, {
              id: 'rev2',
              timestamp: '2011-06-01 12:12:12'
            }
          ]
        }, {
          parse: true
        });
        ok(p.id);
        equal(p.id, 1);
        ok(p.lastRevision);
        ok(p.lastRevision instanceof Revision);
        ok(p.lastRevision.timestamp instanceof Date);
        equal(p.lastRevision.id, 'rev2');
        ok(p.history);
        ok(p.history instanceof Revisions);
        equal(p.history.length, 2);
        ok(p.history.at(0) instanceof Revision);
        return equal(p.history.at(0).id, 'rev1');
      });
      return it('validates', function() {
        var p;

        p = new Page({
          id: 1,
          lastRevision: {
            id: 'rev2',
            timestamp: '2011-06-01 12:12:12'
          },
          history: [
            {
              id: 'rev1',
              timestamp: '2011-06-01 12:12:12'
            }, {
              id: 'rev2',
              timestamp: '2011-06-01 12:12:12'
            }
          ]
        }, {
          parse: true
        });
        ok(p.isValid());
        p = new Page({
          id: 1,
          lastRevision: {
            id: 'rev2',
            timestamp: '2011-06-01 12:12:12'
          },
          history: []
        }, {
          parse: true
        });
        ok(p.isValid());
        p = new Page({
          id: 1,
          lastRevision: {
            id: 'rev2',
            timestamp: '2011-06-01 12:12:12'
          }
        }, {
          parse: true
        });
        ok(!p.isValid());
        ok(p.validationError.history);
        ok(!p.validationError.lastRevision);
        p = new Page({
          id: 1,
          history: []
        }, {
          parse: true
        });
        return ok(p.isValid());
      });
    });
  });
});
